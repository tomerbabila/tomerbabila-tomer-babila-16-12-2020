{"version":3,"sources":["actions.js","components/OneReceivedItem.js","components/ReceivedList.js","components/MainReceivedList.js","components/ErrorBoundary.js","components/OneItem.js","components/ItemList.js","components/StoreInfoCard.js","components/StoresInfo.js","components/MainItemList.js","components/NotFound.js","components/NavBar.js","App.js","reducers/mainReducer.js","reducers/antdReducer.js","reducers/currencyReducer.js","reducers/index.js","index.js"],"names":["editItemList","items","type","payload","editReceivedList","changeUsingCurrency","usingCurrency","updateTime","newTime","Paragraph","Typography","Text","OneReceivedItem","itemData","storeName","dispatch","useDispatch","useSelector","state","currencyReducer","useState","loading","setLoading","backItemToItemList","a","deleteReqBody","id","store","fetch","method","headers","body","JSON","stringify","then","response","json","receivedItem","postReqBody","res","newState","message","warning","Error","className","title","name","extra","onClick","style","background","borderColor","strong","price","value","toFixed","sign","TabPane","Tabs","ReceivedList","receivedItems","mainReducer","receivedList","screenSize","size","defaultActiveKey","tabPosition","width","map","storeData","tab","item","Option","Select","MainReceivedList","currency","time","useEffect","data","tabBarExtraContent","onChange","rates","Object","keys","rateName","ErrorBoundary","props","hasError","this","children","React","Component","OneItem","moveItemToReceivedItems","success","Date","deliveryESTDate","toDateString","now","layout","labelCol","span","wrapperCol","ItemList","itemList","options","antdReducer","visible","setVisible","confirmLoading","setConfirmLoading","newItemName","setNewItemName","newItemStore","setNewItemStore","newItemDate","setNewItemDate","newItemPrice","setNewItemPrice","icon","PlusOutlined","onOk","itemsData","onCancel","Item","label","rules","required","filterOption","inputValue","option","toUpperCase","indexOf","e","target","parseFloat","date","dateString","parse","StoreInfoCard","length","reduce","StoresInfo","MainItemList","allStores","NotFound","history","useHistory","setTimeout","push","Title","NavBar","currentTab","mode","changeTab","key","selectedKeys","ProfileOutlined","to","FileDoneOutlined","App","lastCurrency","hashString","useCallback","str","hash","i","charCodeAt","getCurrency","currentCurrency","interval","setInterval","clearInterval","window","addEventListener","height","innerHeight","innerWidth","path","exact","from","initialState","action","combineReducers","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.830d8287.chunk.js","sourcesContent":["export const editItemList = (items) => {\r\n  return {\r\n    type: 'EDIT_ITEM_LIST',\r\n    payload: items,\r\n  };\r\n};\r\n\r\nexport const editReceivedList = (items) => {\r\n  return {\r\n    type: 'EDIT_RECEIVED_LIST',\r\n    payload: items,\r\n  };\r\n};\r\n\r\nexport const updateCurrency = (currency) => {\r\n  return {\r\n    type: 'UPDATE_CURRENCY',\r\n    payload: currency,\r\n  };\r\n};\r\n\r\nexport const changeUsingCurrency = (usingCurrency) => {\r\n  return {\r\n    type: 'CHANGE_USING_CURRENCY',\r\n    payload: usingCurrency,\r\n  };\r\n};\r\n\r\nexport const changeTab = (tab) => {\r\n  return {\r\n    type: 'CHANGE_TAB',\r\n    payload: tab,\r\n  };\r\n};\r\n\r\nexport const screenSizeChanges = (newSize) => {\r\n  return {\r\n    type: 'SCREEN_SIZE_CHANGES',\r\n    payload: newSize,\r\n  };\r\n};\r\n\r\nexport const updateTime = (newTime) => {\r\n  return {\r\n    type: 'CHANGE_TIME',\r\n    payload: newTime,\r\n  };\r\n};\r\n\r\nexport const editOptions = (options) => {\r\n  return {\r\n    type: 'EDIT_OPTIONS',\r\n    payload: options,\r\n  };\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Card, Typography, Button, message } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { editReceivedList } from '../actions';\r\n\r\nconst { Paragraph, Text } = Typography;\r\n\r\nfunction OneReceivedItem({ itemData, storeName }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const usingCurrency = useSelector(\r\n    (state) => state.currencyReducer.usingCurrency\r\n  );\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Recall an item\r\n  const backItemToItemList = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const deleteReqBody = {\r\n        id: itemData.id,\r\n        store: storeName,\r\n      };\r\n\r\n      // Delete item from received item list\r\n      const receivedItem = await fetch('/api/v1/receivedItems', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(deleteReqBody),\r\n      }).then((response) => response.json());\r\n\r\n      const postReqBody = {\r\n        ...receivedItem,\r\n        store: storeName,\r\n      };\r\n\r\n      // Add item back to item list\r\n      await fetch('/api/v1/items', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(postReqBody),\r\n      }).then((response) => response.json());\r\n\r\n      // Change state\r\n      const newState = await fetch('/api/v1/receivedItems').then((res) =>\r\n        res.json()\r\n      );\r\n      dispatch(editReceivedList(newState));\r\n\r\n      setLoading(false);\r\n\r\n      message.warning('Item recall!');\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='card-margin'>\r\n      <Card\r\n        title={itemData.name}\r\n        extra={\r\n          <Button\r\n            type='primary'\r\n            onClick={() => backItemToItemList()}\r\n            style={{ background: '#f93154', borderColor: '#f93154' }}\r\n            loading={loading}\r\n          >\r\n            Recall\r\n          </Button>\r\n        }\r\n        className='card-class'\r\n      >\r\n        <Paragraph>\r\n          Price:{' '}\r\n          <Text strong>\r\n            {(itemData.price * usingCurrency.value).toFixed(2)}{' '}\r\n            {usingCurrency.sign}\r\n          </Text>\r\n        </Paragraph>\r\n        <Paragraph>\r\n          <Text strong>Item arrived!</Text>\r\n        </Paragraph>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OneReceivedItem;\r\n","import React from 'react';\r\nimport OneReceivedItem from './OneReceivedItem';\r\nimport { useSelector } from 'react-redux';\r\nimport { Tabs } from 'antd';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction ReceivedList() {\r\n  const receivedItems = useSelector((state) => state.mainReducer.receivedList);\r\n  const screenSize = useSelector((state) => state.mainReducer.screenSize);\r\n\r\n  return (\r\n    <div>\r\n      <Tabs\r\n        size={'large'}\r\n        defaultActiveKey='1'\r\n        tabPosition={screenSize.width > 600 ? 'left' : 'top'}\r\n      >\r\n        {receivedItems &&\r\n          receivedItems.map((storeData) => (\r\n            <TabPane\r\n              tab={`${storeData.store}`}\r\n              key={storeData.store}\r\n              className='list-class'\r\n            >\r\n              {storeData.items &&\r\n                storeData.items.map((item) => (\r\n                  <OneReceivedItem\r\n                    key={item.id}\r\n                    itemData={item}\r\n                    storeName={storeData.store}\r\n                  />\r\n                ))}\r\n            </TabPane>\r\n          ))}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReceivedList;\r\n","import React, { useEffect } from 'react';\r\nimport ReceivedList from './ReceivedList';\r\nimport { Tabs, Select, Divider, Typography } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { editReceivedList, changeUsingCurrency, updateTime } from '../actions';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nfunction MainReceivedList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const currency = useSelector((state) => state.currencyReducer.currency);\r\n  const time = useSelector((state) => state.currencyReducer.time);\r\n  const screenSize = useSelector((state) => state.mainReducer.screenSize);\r\n  const usingCurrency = useSelector(\r\n    (state) => state.currencyReducer.usingCurrency\r\n  );\r\n\r\n  // Load all items and stores to state\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const data = await fetch('/api/v1/receivedItems').then((res) =>\r\n          res.json()\r\n        );\r\n        dispatch(editReceivedList(data));\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    })();\r\n  }, [dispatch]);\r\n\r\n  // Change currency state\r\n  const handleCurrencyChange = (value) => {\r\n    dispatch(\r\n      changeUsingCurrency({ sign: value, value: currency.rates[value] })\r\n    );\r\n  };\r\n\r\n  // Change fetch time of currency\r\n  const handleChangeTime = (value) => {\r\n    dispatch(updateTime(value));\r\n  };\r\n\r\n  return (\r\n    <div className='content-class'>\r\n      {currency && (\r\n        <Tabs\r\n          tabBarExtraContent={\r\n            <Typography>\r\n              {screenSize.width > 1000 ? (\r\n                <Text>Update currency every: </Text>\r\n              ) : null}\r\n              <Select value={time} onChange={handleChangeTime}>\r\n                <Option value={10000} key='1'>\r\n                  10 sec.\r\n                </Option>\r\n                <Option value={30000} key='2'>\r\n                  30 sec.\r\n                </Option>\r\n                <Option value={60000} key='3'>\r\n                  60 sec.\r\n                </Option>\r\n              </Select>\r\n              <Divider type='vertical' />\r\n              {screenSize.width > 1000 ? <Text>Currency: </Text> : null}\r\n              <Select\r\n                value={usingCurrency.sign}\r\n                onChange={handleCurrencyChange}\r\n              >\r\n                {Object.keys(currency.rates).map((rateName) => (\r\n                  <Option value={rateName} key={rateName}>\r\n                    {rateName}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n            </Typography>\r\n          }\r\n        >\r\n          <TabPane tab='Received Items' key='1'>\r\n            <ReceivedList />\r\n          </TabPane>\r\n        </Tabs>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainReceivedList;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state so the next render will show the fallback UI\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useState } from 'react';\r\nimport { Card, Typography, Button, Alert, message } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { editItemList } from '../actions';\r\n\r\nconst { Paragraph, Text } = Typography;\r\n\r\nfunction OneItem({ itemData, storeName }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const usingCurrency = useSelector(\r\n    (state) => state.currencyReducer.usingCurrency\r\n  );\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Set item as received\r\n  const moveItemToReceivedItems = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const deleteReqBody = {\r\n        id: itemData.id,\r\n        store: storeName,\r\n      };\r\n\r\n      // Delete item from item list\r\n      const receivedItem = await fetch('/api/v1/items', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(deleteReqBody),\r\n      }).then((response) => response.json());\r\n\r\n      const postReqBody = {\r\n        ...receivedItem,\r\n        store: storeName,\r\n      };\r\n\r\n      // Add item to received list\r\n      await fetch('/api/v1/receivedItems', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(postReqBody),\r\n      }).then((response) => response.json());\r\n\r\n      // Change state\r\n      const newState = await fetch('/api/v1/items').then((res) => res.json());\r\n      dispatch(editItemList(newState));\r\n\r\n      setLoading(false);\r\n\r\n      message.success('Item received!');\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='card-margin'>\r\n      <Card\r\n        title={itemData.name}\r\n        extra={\r\n          <Button\r\n            type='primary'\r\n            onClick={() => moveItemToReceivedItems()}\r\n            style={{ background: '#00b74a', borderColor: '#00b74a' }}\r\n            loading={loading}\r\n          >\r\n            Received\r\n          </Button>\r\n        }\r\n        className='card-class'\r\n      >\r\n        <Paragraph>\r\n          Price:{' '}\r\n          <Text strong>\r\n            {(itemData.price * usingCurrency.value).toFixed(2)}{' '}\r\n            {usingCurrency.sign}\r\n          </Text>\r\n        </Paragraph>\r\n        <Paragraph>\r\n          Estimated date:{' '}\r\n          <Text strong>\r\n            {new Date(itemData.deliveryESTDate).toDateString()}\r\n          </Text>\r\n        </Paragraph>\r\n        {Date.now() > itemData.deliveryESTDate ? (\r\n          <Alert message='Still not here? Contact the seller.' type='error' />\r\n        ) : (\r\n          <Alert message='Everything is cool... wait for delivery.' />\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OneItem;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { editItemList } from '../actions';\r\nimport OneItem from './OneItem';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport {\r\n  Tabs,\r\n  Button,\r\n  Typography,\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  InputNumber,\r\n  DatePicker,\r\n  AutoComplete,\r\n  message,\r\n} from 'antd';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Text } = Typography;\r\n\r\nconst layout = {\r\n  labelCol: { span: 6 },\r\n  wrapperCol: { span: 16 },\r\n};\r\n\r\nfunction ItemList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const items = useSelector((state) => state.mainReducer.itemList);\r\n  const screenSize = useSelector((state) => state.mainReducer.screenSize);\r\n  const options = useSelector((state) => state.antdReducer.options);\r\n\r\n  // Local states for new item\r\n  const [visible, setVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [newItemName, setNewItemName] = useState('');\r\n  const [newItemStore, setNewItemStore] = useState('');\r\n  const [newItemDate, setNewItemDate] = useState(0);\r\n  const [newItemPrice, setNewItemPrice] = useState(0);\r\n\r\n  // Press add new item\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  // Press ok in the modal\r\n  const handleOk = () => {\r\n    setConfirmLoading(true);\r\n\r\n    (async () => {\r\n      try {\r\n        const postReqBody = {\r\n          name: newItemName,\r\n          store: newItemStore,\r\n          deliveryESTDate: newItemDate,\r\n          price: newItemPrice,\r\n        };\r\n\r\n        await fetch('/api/v1/items', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(postReqBody),\r\n        }).then((response) => response.json());\r\n\r\n        // Load all items and their stores to state\r\n        const itemsData = await fetch('/api/v1/items').then((res) =>\r\n          res.json()\r\n        );\r\n        dispatch(editItemList(itemsData));\r\n\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n\r\n        message.success('Item added successfully!');\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    })();\r\n  };\r\n\r\n  // Press cancel in the modal\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Tabs\r\n        defaultActiveKey='1'\r\n        tabPosition={screenSize.width > 850 ? 'left' : 'top'}\r\n        size={'large'}\r\n        tabBarExtraContent={\r\n          <Typography>\r\n            <Button\r\n              type='primary'\r\n              size='large'\r\n              icon={<PlusOutlined />}\r\n              onClick={showModal}\r\n            >\r\n              {screenSize.width > 850 ? 'Add Item' : ''}\r\n            </Button>\r\n            <Modal\r\n              title='Add new item...'\r\n              visible={visible}\r\n              onOk={handleOk}\r\n              confirmLoading={confirmLoading}\r\n              onCancel={handleCancel}\r\n            >\r\n              <Form {...layout} name='basic'>\r\n                <Form.Item\r\n                  label='Store'\r\n                  name='store'\r\n                  rules={[\r\n                    { required: true, message: 'Please enter store name!' },\r\n                  ]}\r\n                >\r\n                  <AutoComplete\r\n                    options={options}\r\n                    onChange={(value) => setNewItemStore(value)}\r\n                    filterOption={(inputValue, option) =>\r\n                      option.value\r\n                        .toUpperCase()\r\n                        .indexOf(inputValue.toUpperCase()) !== -1\r\n                    }\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label='Item'\r\n                  name='item'\r\n                  rules={[\r\n                    { required: true, message: 'Please enter item name!' },\r\n                  ]}\r\n                >\r\n                  <Input onChange={(e) => setNewItemName(e.target.value)} />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label='Price'\r\n                  name='price'\r\n                  rules={[{ required: true, message: 'Please enter price!' }]}\r\n                >\r\n                  <InputNumber\r\n                    onChange={(value) => setNewItemPrice(parseFloat(value))}\r\n                  />\r\n                  <Text strong> USD</Text>\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label='Estimated Date'\r\n                  name='date'\r\n                  rules={[{ required: true, message: 'Please pick date!' }]}\r\n                >\r\n                  <DatePicker\r\n                    onChange={(date, dateString) =>\r\n                      setNewItemDate(Date.parse(dateString))\r\n                    }\r\n                  />\r\n                </Form.Item>\r\n              </Form>\r\n            </Modal>\r\n          </Typography>\r\n        }\r\n      >\r\n        {items &&\r\n          items.map((storeData) => (\r\n            <TabPane\r\n              tab={`${storeData.store}`}\r\n              key={storeData.store}\r\n              className='list-class'\r\n            >\r\n              {storeData.items &&\r\n                storeData.items.map((item) => (\r\n                  <OneItem\r\n                    key={item.id}\r\n                    itemData={item}\r\n                    storeName={storeData.store}\r\n                  />\r\n                ))}\r\n            </TabPane>\r\n          ))}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemList;\r\n","import React from 'react';\r\nimport { Card, Typography } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { Paragraph, Text } = Typography;\r\n\r\nfunction StoreInfoCard({ storeData }) {\r\n  const usingCurrency = useSelector(\r\n    (state) => state.currencyReducer.usingCurrency\r\n  );\r\n\r\n  return (\r\n    <div className='card-margin'>\r\n      <Card title={storeData.store} className='card-class'>\r\n        <Paragraph>\r\n          You have <Text strong>{storeData.items.length}</Text> pending items in\r\n          this store.\r\n        </Paragraph>\r\n        <Paragraph>\r\n          Total price:{' '}\r\n          <Text strong>\r\n            {(\r\n              storeData.items.reduce((a, { price }) => a + price, 0) *\r\n              usingCurrency.value\r\n            ).toFixed(2)}{' '}\r\n            {usingCurrency.sign}\r\n          </Text>\r\n        </Paragraph>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoreInfoCard;\r\n","import React from 'react';\r\nimport StoreInfoCard from './StoreInfoCard';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction StoresInfo() {\r\n  const items = useSelector((state) => state.mainReducer.itemList);\r\n\r\n  return (\r\n    <div className='list-class'>\r\n      {items.map((storeData) => (\r\n        <StoreInfoCard key={storeData.store} storeData={storeData} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoresInfo;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  editItemList,\r\n  changeUsingCurrency,\r\n  updateTime,\r\n  editOptions,\r\n} from '../actions';\r\nimport ItemList from './ItemList';\r\nimport StoresInfo from './StoresInfo';\r\nimport { Tabs, Select, Typography, Divider } from 'antd';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nfunction MainItemList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const currency = useSelector((state) => state.currencyReducer.currency);\r\n  const time = useSelector((state) => state.currencyReducer.time);\r\n  const screenSize = useSelector((state) => state.mainReducer.screenSize);\r\n  const usingCurrency = useSelector(\r\n    (state) => state.currencyReducer.usingCurrency\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        // Load all items and their stores to state\r\n        const itemsData = await fetch('/api/v1/items').then((res) =>\r\n          res.json()\r\n        );\r\n\r\n        const allStores = itemsData.map((storeData) => {\r\n          return { value: storeData.store };\r\n        });\r\n\r\n        dispatch(editItemList(itemsData));\r\n        dispatch(editOptions(allStores));\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    })();\r\n  }, [dispatch]);\r\n\r\n  // Change currency state\r\n  const handleCurrencyChange = (value) => {\r\n    dispatch(\r\n      changeUsingCurrency({ sign: value, value: currency.rates[value] })\r\n    );\r\n  };\r\n\r\n  // Change fetch time of currency \r\n  const handleChangeTime = (value) => {\r\n    dispatch(updateTime(value));\r\n  };\r\n\r\n  return (\r\n    <div className='content-class'>\r\n      {currency && (\r\n        <Tabs\r\n          tabBarExtraContent={\r\n            <Typography>\r\n              {screenSize.width > 1000 ? (\r\n                <Text>Update currency every: </Text>\r\n              ) : null}\r\n              <Select value={time} onChange={handleChangeTime}>\r\n                <Option value={10000} key='1'>\r\n                  10 sec.\r\n                </Option>\r\n                <Option value={30000} key='2'>\r\n                  30 sec.\r\n                </Option>\r\n                <Option value={60000} key='3'>\r\n                  60 sec.\r\n                </Option>\r\n              </Select>\r\n              <Divider type='vertical' />\r\n              {screenSize.width > 1000 ? <Text>Currency: </Text> : null}\r\n              <Select\r\n                value={usingCurrency.sign}\r\n                onChange={handleCurrencyChange}\r\n              >\r\n                {Object.keys(currency.rates).map((rateName) => (\r\n                  <Option value={rateName} key={rateName}>\r\n                    {rateName}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n            </Typography>\r\n          }\r\n        >\r\n          <TabPane tab='Items' key='1'>\r\n            <ItemList />\r\n          </TabPane>\r\n          <TabPane tab='Stores Information' key='2'>\r\n            <StoresInfo />\r\n          </TabPane>\r\n        </Tabs>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainItemList;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction NotFound() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      history.push('/');\r\n    }, 2000);\r\n  }, [history]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>404 :(</h1>\r\n      <div>this page does not exit. You will redirect to home page soon...</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Menu, Typography } from 'antd';\r\nimport { ProfileOutlined, FileDoneOutlined } from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeTab } from '../actions';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction NavBar() {\r\n  const dispatch = useDispatch();\r\n  \r\n  const tab = useSelector((state) => state.antdReducer.currentTab);\r\n\r\n  return (\r\n    <div className='navbar'>\r\n      <Title>Items Tracker</Title>\r\n      <Menu\r\n        mode='horizontal'\r\n        onClick={(e) => dispatch(changeTab(e.key))}\r\n        selectedKeys={tab}\r\n      >\r\n        <Menu.Item key='list' icon={<ProfileOutlined />}>\r\n          <Link to={'/list'}>List</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='received' icon={<FileDoneOutlined />}>\r\n          <Link to={'/received'}>Received</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateCurrency, screenSizeChanges } from './actions';\r\nimport MainReceivedList from './components/MainReceivedList';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport MainItemList from './components/MainItemList';\r\nimport NotFound from './components/NotFound';\r\nimport NavBar from './components/NavBar';\r\nimport './styles/App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  const lastCurrency = useSelector((state) => state.currencyReducer.currency);\r\n  const time = useSelector((state) => state.currencyReducer.time);\r\n\r\n  // Use hash function to check if the state has been changed\r\n  const hashString = useCallback((str) => {\r\n    var hash = 0;\r\n    if (str.length === 0) {\r\n      return hash;\r\n    }\r\n    for (var i = 0; i < str.length; i++) {\r\n      var char = str.charCodeAt(i);\r\n      hash = (hash << 5) - hash + char;\r\n      hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n    return hash;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCurrency = async () => {\r\n      try {\r\n        const currentCurrency = await fetch(\r\n          'https://api.exchangeratesapi.io/latest?base=USD'\r\n        ).then((res) => res.json());\r\n\r\n        // Change the state if changed\r\n        if (\r\n          hashString(JSON.stringify(lastCurrency)) !==\r\n          hashString(JSON.stringify(currentCurrency))\r\n        ) {\r\n          dispatch(updateCurrency(currentCurrency));\r\n        }\r\n      } catch (error) {\r\n        throw new Error(error);\r\n      }\r\n    };\r\n\r\n    getCurrency();\r\n    // Fetch current currency base on USD by configurable time\r\n    const interval = setInterval(() => getCurrency(), time);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [time, lastCurrency, dispatch, hashString]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      dispatch(\r\n        screenSizeChanges({\r\n          height: window.innerHeight,\r\n          width: window.innerWidth,\r\n        })\r\n      );\r\n    };\r\n    // Listen to screen resize\r\n    window.addEventListener('resize', handleResize);\r\n  });\r\n\r\n  return (\r\n    <div className='App'>\r\n      <ErrorBoundary>\r\n        <Router>\r\n          <NavBar />\r\n          <Switch>\r\n            <Route path='/list'>\r\n              <MainItemList />\r\n            </Route>\r\n            <Route path='/received'>\r\n              <MainReceivedList />\r\n            </Route>\r\n            <Redirect exact from='/' to='/list' />\r\n            <Route>\r\n              <NotFound />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n  itemList: [],\r\n  receivedList: [],\r\n  screenSize: { width: window.innerWidth, height: window.innerHeight },\r\n};\r\n\r\nfunction mainReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'EDIT_ITEM_LIST':\r\n      return { ...state, itemList: action.payload };\r\n    case 'EDIT_RECEIVED_LIST':\r\n      return { ...state, receivedList: action.payload };\r\n    case 'SCREEN_SIZE_CHANGES':\r\n      return { ...state, screenSize: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default mainReducer;\r\n","const initialState = {\r\n  currentTab: 'list',\r\n  options: [],\r\n};\r\n\r\nfunction antdReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'CHANGE_TAB':\r\n      return { ...state, currentTab: action.payload };\r\n    case 'EDIT_OPTIONS':\r\n      return { ...state, options: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default antdReducer;\r\n","const initialState = {\r\n  currency: 0,\r\n  usingCurrency: {\r\n    sign: 'USD',\r\n    value: 1,\r\n  },\r\n  time: 10000,\r\n};\r\n\r\nfunction currencyReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'UPDATE_CURRENCY':\r\n      return { ...state, currency: action.payload };\r\n    case 'CHANGE_USING_CURRENCY':\r\n      return { ...state, usingCurrency: action.payload };\r\n    case 'CHANGE_TIME':\r\n      return { ...state, time: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default currencyReducer;\r\n","import { combineReducers } from 'redux';\r\nimport mainReducer from './mainReducer';\r\nimport antdReducer from './antdReducer';\r\nimport currencyReducer from './currencyReducer';\r\n\r\nexport default combineReducers({\r\n  mainReducer,\r\n  antdReducer,\r\n  currencyReducer\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport combineReducers from './reducers/index';\nimport 'antd/dist/antd.css';\n\nconst store = createStore(combineReducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}